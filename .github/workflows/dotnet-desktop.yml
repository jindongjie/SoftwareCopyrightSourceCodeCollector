name: .NET Core Desktop

permissions:
  actions: write
  attestations: write
  checks: write
  contents: write
  deployments: write
  discussions: write
  issues: write
  packages: write
  pages: write
  pull-requests: write
  repository-projects: write
  security-events: write
  statuses: write

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]
  release:
    types: [created]

jobs:
  build-windows:
    runs-on: windows-latest
    env:
      Project_Path: SoftwareCopyrightSourceCodeCollector.Desktop/SoftwareCopyrightSourceCodeCollector.Desktop.csproj
    steps:
      - name: Checkout Sources
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      - name: Publish Application for Windows
        shell: pwsh
        run: |
          $args = @(
            $env:Project_Path,
            "-c", "Release",
            "--self-contained", "true",
            "--runtime", "win-x64",
            "--",
            "-p:PublishSingleFile=true",
            "-p:PublishReadyToRun=true",
            "-p:PublishTrimmed=true"
          )
          dotnet publish @args

      - name: Stop dotnet process
        shell: pwsh
        run: taskkill /F /IM dotnet.exe

      - name: Archive Windows Build Output
        shell: pwsh
        run: |
          $publishPath = Resolve-Path "**\bin\Release\net8.0\win-x64\publish\"
          if (-Not (Test-Path $publishPath)) {
            Write-Error "Publish folder not found: $publishPath"
            exit 1
          }
          Compress-Archive -Path "$publishPath\*" -DestinationPath release-windows.zip

      - name: Upload Build Artifacts (Windows)
        uses: actions/upload-artifact@v4
        with:
          name: windows-build-${{ github.run_id }}
          path: "**/bin/Release/net8.0/win-x64/publish/"

      - name: Upload Release Asset (Windows)
        if: github.event_name == 'release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: release-windows.zip
          asset_name: release-windows.zip
          asset_content_type: application/zip

  build-ubuntu:
    runs-on: ubuntu-latest
    env:
      Project_Path: SoftwareCopyrightSourceCodeCollector.Desktop/SoftwareCopyrightSourceCodeCollector.Desktop.csproj
    steps:
      - name: Checkout Sources
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      - name: Publish Application for Ubuntu
        run: |
          dotnet publish ${{ env.Project_Path }} -c Release --self-contained true \
            /p:PublishSingleFile=true /p:PublishReadyToRun=true /p:PublishTrimmed=true --runtime linux-x64
        env:
          Configuration: Release

      - name: Stop dotnet process
        run: killall dotnet || true

      - name: Archive Ubuntu Build Output
        run: zip -r release-ubuntu.zip **/bin/Release/net8.0/linux-x64/publish/

      - name: Upload Build Artifacts (Ubuntu)
        uses: actions/upload-artifact@v4
        with:
          name: ubuntu-build-${{ github.run_id }}
          path: "**/bin/Release/net8.0/linux-x64/publish/"

      - name: Upload Release Asset (Ubuntu)
        if: github.event_name == 'release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: release-ubuntu.zip
          asset_name: release-ubuntu.zip
          asset_content_type: application/zip

  build-macos:
    runs-on: macos-latest
    env:
      Project_Path: SoftwareCopyrightSourceCodeCollector.Desktop/SoftwareCopyrightSourceCodeCollector.Desktop.csproj
    steps:
      - name: Checkout Sources
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      - name: Publish Application for macOS
        run: |
          dotnet publish ${{ env.Project_Path }} -c Release --self-contained true \
            /p:PublishSingleFile=true /p:PublishReadyToRun=true /p:PublishTrimmed=true --runtime osx-x64
        env:
          Configuration: Release

      - name: Stop dotnet process
        run: pkill dotnet || true

      - name: Archive macOS Build Output (Switch Directory)
        run: |
          # Locate the publish directory; adjust the glob pattern if needed.
          PUBLISH_DIR=$(find . -type d -path "*/bin/Release/net8.0/osx-x64/publish" | head -n 1)
          if [ -z "$PUBLISH_DIR" ]; then
            echo "Publish directory not found!" && exit 1
          fi
          echo "Publishing from directory: $PUBLISH_DIR"
          cd "$PUBLISH_DIR"
          # Create zip file at the root of the workspace; adjust path if necessary.
          zip -r ../../../../release-macos.zip .
          cp ../../../../release-macos.zip $GITHUB_WORKSPACE/release-macos.zip

      - name: Upload Build Artifacts (macOS)
        uses: actions/upload-artifact@v4
        with:
          name: macos-build-${{ github.run_id }}
          path: "**/bin/Release/net8.0/osx-x64/publish/"

      - name: Upload Release Asset (macOS)
        if: github.event_name == 'release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: release-macos.zip
          asset_name: release-macos.zip
          asset_content_type: application/zip
